Basic JUnit Structure :

package com.in28minutes.junit.helper;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class QuickBeforeAfterTest1 {
	
	@BeforeClass  // This is a class level so it should be static
	public static void  beforeClass(){
		System.out.println("Before Class");
		//To Some DB connection
	}
	
	@Before // Executed for each test case
	public void setup(){
		System.out.println("Before Test");
	}
	
	@Test
	public void test1() {
		System.out.println("test1 executed");
	}

	@Test
	public void test2() {
		System.out.println("test2 executed");
	}
	
	@After
	public void teardown(){
		System.out.println("After");
	}
	
	@AfterClass
	public static void afterClass(){
		
		System.out.println("After Class");
	}
}


How to test Arrays?

	@Test
	public void testArraySort_RandomArray() {
		
		int[] numbers = {12,3,4,1};
		int[] expected = {1,3,4,12};
		
		Arrays.sort(numbers);
		assertArrayEquals(expected, numbers);
		
	}

How to test Exceptions?

	@Test(expected=NullPointerException.class)
	public void testArraySort_NullArray() {
		int[] numbers = null;
		Arrays.sort(numbers);
	}

How to test for performance?

	@Test(timeout=1000) //1000 milisec
	public void testArraySort_Performance() {
		
		int array[] = {12,23,4};
		
		for(int i=1;i<=1000000;i++){
			array[0] = i;
			Arrays.sort(array);
		}
		
	}

How to write parameterized test?

Step -1 : Annotate the test class with @RunWith(Parameterized.class)

Step -2 : Create a public static Collection getParam() and annotate it with @Parameters

Step -3 : Create parameterized constuctor

Example :

package com.in28minutes.junit.helper;

import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class StringHelperParameterizedTest {

	// AACD => CD ACD => CD CDEF=>CDEF CDAA => CDAA

	StringHelper helper = new StringHelper();
	
	private String input;
	private String expectedOutput;
	
	public StringHelperParameterizedTest(String input, String expectedOutput) {
		this.input = input;
		this.expectedOutput = expectedOutput;
	}

	@Parameters
	public static Collection<String[]> testConditions() {
		String expectedOutputs[][] = { 
				{ "AACD", "CD" }, 
				{ "ACD", "CD" } };
		return Arrays.asList(expectedOutputs);
	}

	@Test
	public void testTruncateAInFirst2Positions() {
		assertEquals(expectedOutput, 
				helper.truncateAInFirst2Positions(input));
	}
}



----------------------------------------------

Mockito is the default framework to test the spring based applications

Step -1: 
import static org.mocktio.Mocktio.mock;
DataService dataServiceMock = mock(DataService.class)

Step - 2:
Now i want like dataServiceMock.retrieveAllData() => new int[] {24,15,3}

when(dataServiceMock.retrieveAllData()).thenReturn(new int[] {24,15,3});


That's it!!!


## Mockito Annotations to make it easy:

@Mock 
DataService dataServiceMock; //This is used to mock the service

@InjectMock
SomeBusinessImpl businessImpl; //This is used to Inject the mocks in business impl

But it will throw nullpointerexception if @RunWith(MockitoJunitRunner.class) is not kept over the class.

## If thenReturn() is called multiple times then it will give the result on that particuler count

Self explainatory code

package com.learn.mockito.mockito.demo;

import static org.junit.Assert.*;

import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;


public class ListInterfaceMockTest {

	@Test
	public void testListOne() {
		List listMock = mock(List.class);
		when(listMock.size()).thenReturn(10);
		assertEquals(10,listMock.size());
		assertEquals(10,listMock.size());
	}
	
	@Test
	public void testListTwo() {
		List listMock = mock(List.class);
		when(listMock.size()).thenReturn(10).thenReturn(20);
		assertEquals(10,listMock.size());
		assertEquals(20,listMock.size());
		assertEquals(20,listMock.size());
	}


}


## How to return a value for specific input or for generic input?

Make sure the mocking param can either be generic or specific and not the combination of generic and specific

@Test
	public void testGet_Specific() {
		List listMock = mock(List.class);
		when(listMock.get(0)).thenReturn("Specific String");
		assertEquals("Specific String",listMock.get(0));
		assertEquals(null,listMock.get(1));
	}

	@Test
	public void testGet_Generic() {
		List listMock = mock(List.class);
		when(listMock.get(Mockito.anyInt())).thenReturn("Specific String");
		assertEquals("Specific String",listMock.get(0));
		assertEquals("Specific String",listMock.get(1));
	}


## Spring JUnit Testing

org.springframework
spring-test

junit/junit

org.mockito
mockito.core

## 